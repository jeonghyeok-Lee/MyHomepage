<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- BoardDAOTest 실행을 위해 ContextConfiguration에 "classpath:servlet-context.xml" 추가후 해당 resources부분을 주석처리하였음 아직 이유를 발견하지 못해서 알아봐야함 -->
 	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 
	해당 부분은 View Resolver에 대한 정의 부분으로 Controller에서 return값으로 문자열이 넘어오면 prefix/suffix를 조합하여 보여줄 화면을 찾아내는것 
	즉 BoardController에서 넘어온 값을 토대로 만들어지는 주소는 /WEB-INF/views/board/index.jsp가 되는 것
	-->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
	spring에서 Bean을 등록시 클래스를 검색하여 클래스에 특정 어노테이션(@Controller, @Service, @Repository등)이 붙어있으면 Spring Bean클래스라 인식하여 등록하게 되는데
	이때 클래스를 검색하는 기능이 component-scan으로 base-package의 내용을 기준으로 하위 검색-->
	<context:component-scan base-package="com.argonhome" />
	
</beans:beans>
<!-- servlet-context.xml파일은 웹 어플리케이션내에 있는 서블릿들을 관리, 정보를 공유하도록 해주는 등록정보 -->